# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
library(tidyverse)
library(jsonlite)
path = '/media/bohao/File/Data/train_US_kindoftidy.csv'
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
#
# # parse <- . %>%
# #   bind_cols(flatten_json(.$device)) %>%
# #   select(-device) %>%
# #   bind_cols(flatten_json(.$geoNetwork)) %>%
# #   select(-geoNetwork) %>%
# #   bind_cols(flatten_json(.$trafficSource)) %>%
# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
#
# # data = parse(data)
# # show = head(data)
#
# # show$customDimensions = gsub("\\[","",show$customDimensions)
# # show$customDimensions = gsub("\\]","",show$customDimensions)
# # show$customDimensions = gsub("\'","\"",show$customDimensions)
# #
# # show$hits = gsub("^\\[","",show$hits)
# # show$hits = gsub("\\]$","",show$hits)
# # show$hits = gsub("\'","\"",show$hits)
# # show$hits = gsub("True","1",show$hits)
# # show$hits = gsub("False","0",show$hits)
# # show$hits = gsub("[a-zA-Z]+\"s","\'s",show$hits)
# # ## index value
# # xx = show %>% bind_cols(flatten_json(show$customDimensions))
# #
# # yy = show %>% bind_cols(flatten_json(show$hits))
#
# #### Find and delete constant columns
#
# # fea_uniq_values <- sapply(data, n_distinct)
# # fea_del <- names(fea_uniq_values[fea_uniq_values == 1])
# #
# # data = data %>% select(-one_of(fea_del))
# #
# #
# # is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
# #                                   "(not set)", "<NA>", "unknown.unknown",  "(none)",
# #                                   "list()")
# #
# # data = data %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
# #
# # show = head(data)
# #
# # fea_uniq_values <- sapply(data, n_distinct)
# # fea_del <- names(fea_uniq_values[fea_uniq_values == 1])
# #
# # data = data %>% select(-one_of(fea_del))
# #
# # data$transactionRevenue[is.na(data$transactionRevenue)] = 0
# # data$transactions[is.na(data$transactions)] = 0
# #
#
# #### shrink data
n = nrow(data)
data = data %>% select(fullVisitorId, hits)
sub = sample(unique(data$fullVisitorId), 30000, replace = F)
data_slice = data %>% filter(fullVisitorId %in% sub)
wpath1 = '/media/bohao/File/Data/train_US_30000.csv'
write_csv(data_slice, wpath1)
source('~/advanced_data_science/tidyvise.R', echo=TRUE)
source('~/advanced_data_science/tidyvise.R', echo=TRUE)
showhit = head(hits_data,20)
showhit = head(hits_data,40)
showhit = head(hits_data,40)
load("/media/bohao/File/Data/hits.Rdata")
length(unique(hits_data$fullVisitorId))
# hits_data = hits_data %>% select(-one_of(fea_del))
#
#
# is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
#                                   "(not set)", "<NA>", "unknown.unknown",  "(none)")
#
# hits_data = hits_data %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
#
# save(hits_data, file = "/media/bohao/File/Data/hits.Rdata")
#
showhit = head(hits_data,40)
View(showhit)
length(unique(hits_data$fullVisitorId))
# hits_data = hits_data %>% select(-one_of(fea_del))
#
#
# is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
#                                   "(not set)", "<NA>", "unknown.unknown",  "(none)")
#
# hits_data = hits_data %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
#
# save(hits_data, file = "/media/bohao/File/Data/hits.Rdata")
#
showhit = head(hits_data,1000)
length(unique(hits_data$fullVisitorId))
p = 0.5
C = diag(c(1,1,1,1))
C[1,2]=p
C[2,1]=p
C[2,3]=p
C[3,2]=p
C[3,4]=p
C[4,3]=p
C[1,4]=p
C[4,1]=p
C
svd(C)
source('~/.active-rstudio-document', echo=TRUE)
mu = 1.5
sigma = 1.96*sqrt(5)/2
mu-sigma
mu+sigma
source('~/advanced_data_science/tidyvise.R', echo=TRUE)
#
# # data = parse(data)
show = head(data)
View(show)
min(data$date)
max(data$date)
data = data%>%filter(date > 20170430)
n = nrow(data)
data = data %>% select(fullVisitorId, hits, visitId)
sub = sample(unique(data$fullVisitorId), 50000, replace = F)
data_slice = data %>% filter(fullVisitorId %in% sub)
wpath1 = '/media/bohao/File/Data/train_US_30000.csv'
write_csv(data_slice, wpath1)
library(tidyverse)
library(jsonlite)
path = '/media/bohao/File/Data/train_US_5w.csv'
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
#
# # parse <- . %>%
# #   bind_cols(flatten_json(.$device)) %>%
# #   select(-device) %>%
# #   bind_cols(flatten_json(.$geoNetwork)) %>%
# #   select(-geoNetwork) %>%
# #   bind_cols(flatten_json(.$trafficSource)) %>%
# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
# # data = parse(dat
# # data = parse(data)
show = head(data)
View(show)
for(i in 1:nrow(data)){
data$hits[i] = gsub("\'hitNumber\'", paste0("'fullVisitorId':", "'", data$fullVisitorId[i], "', ",
"'visitId':", "'", data$visitId[i], "', \'hitNumber\'"), data$hits[i])
}
# # data = parse(data)
show = head(data)
source('~/advanced_data_science/tidyvise.R', echo=TRUE)
#
show = head(data)
data = data %>% select(hits)
data$hits = gsub("\"","\'",data$hits)
data$hits = gsub("^\\[","",data$hits)
data$hits = gsub("\\]$","",data$hits)
data$hits = gsub("^\'","\"",data$hits)
data$hits = gsub("\'$","\"",data$hits)
data$hits = gsub("\\{\'","\\{\"",data$hits)
data$hits = gsub("\'\\}","\"\\}",data$hits)
data$hits = gsub("\'[  ]*,","\" ,",data$hits)
data$hits = gsub(",[  ]*\'",", \"",data$hits)
data$hits = gsub("\'[  ]*:","\" :",data$hits)
data$hits = gsub(":[   ]*\'",": \"",data$hits)
data$hits = gsub("True","1",data$hits)
data$hits = gsub("False","0",data$hits)
hits_data = str_c(data$hits, collapse = ",")
hits_data = str_c("[", hits_data, "]")
hits_data = gsub("[,]+",",", hits_data)
hits_data = fromJSON(hits_data, flatten = T)
fea_uniq_values <- sapply(hits_data, n_distinct)
fea_del <- names(fea_uniq_values[fea_uniq_values == 1])
hits_data = hits_data %>% select(-one_of(fea_del))
is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
"(not set)", "<NA>", "unknown.unknown",  "(none)")
hits_data = hits_data %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
save(hits_data, file = "/media/bohao/File/Data/hits.Rdata")
showhit = head(hits_data,20)
#
show = head(data)
save(hits_data, file = "/media/bohao/File/Data/hits_data.Rdata")
warnings()
save(data, file = "/media/bohao/File/Data/hits_data.Rdata")
load("/media/bohao/File/Data/hits_data.Rdata")
hits_data = str_c(data$hits, collapse = ",")
hits_data = str_c("[", hits_data, "]")
hits_data = gsub("[,]+",",", hits_data)
library(tidyverse)
library(jsonlite)
hits_data = str_c(data$hits, collapse = ",")
hits_data = str_c("[", hits_data, "]")
hits_data = gsub("[,]+",",", hits_data)
load("/media/bohao/File/Data/hits_data.Rdata")
hits_data = str_c(data$hits, collapse = ",")
hits_data = str_c("[", hits_data, "]")
save(hits_data, file = "/media/bohao/File/Data/hits_data.Rdata")
library(tidyverse)
library(jsonlite)
library(stringi)
path = '/media/bohao/File/Data/train_US_5w.csv'
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
#
# # parse <- . %>%
# #   bind_cols(flatten_json(.$device)) %>%
# #   select(-device) %>%
# #   bind_cols(flatten_json(.$geoNetwork)) %>%
# #   select(-geoNetwork) %>%
# #   bind_cols(flatten_json(.$trafficSource)) %>%
# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
# # data = parse(data)
show = head(data)
#
# # show$customDimensions = gsub("\\[","",show$customDimensions)
# # show$customDimensions = gsub("\\]","",show$customDimensions)
# # show$customDimensions = gsub("\'","\"",show$customDimensions)
# #
# # show$hits = gsub("^\\[","",show$hits)
# # show$hits = gsub("\\]$","",show$hits)
# # show$hits = gsub("\'","\"",show$hits)
# # show$hits = gsub("True","1",show$hits)
# # show$hits = gsub("False","0",show$hits)
# # show$hits = gsub("[a-zA-Z]+\"s","\'s",show$hits)
# # ## index value
# # xx = show %>% bind_cols(flatten_json(show$customDimensions))
# #
# # yy = show %>% bind_cols(flatten_json(show$hits))
#
# #### Find and delete constant columns
#
# # fea_uniq_values <- sapply(data, n_distinct)
# # fea_del <- names(fea_uniq_values[fea_uniq_values == 1])
# #
# # data = data %>% select(-one_of(fea_del))
# #
# #
# # is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
# #                                   "(not set)", "<NA>", "unknown.unknown",  "(none)",
# #                                   "list()")
# #
# # data = data %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
# #
# # show = head(data)
# #
# # fea_uniq_values <- sapply(data, n_distinct)
# # fea_del <- names(fea_uniq_values[fea_uniq_values == 1])
# #
# # data = data %>% select(-one_of(fea_del))
# #
# # data$transactionRevenue[is.na(data$transactionRevenue)] = 0
# # data$transactions[is.na(data$transactions)] = 0
# #
#
# #### shrink data
# n = nrow(data)
# data = data %>% select(fullVisitorId, hits, visitId)
# sub = sample(unique(data$fullVisitorId), 50000, replace = F)
# data_slice = data %>% filter(fullVisitorId %in% sub)
#
# wpath1 = '/media/bohao/File/Data/train_US_30000.csv'
# write_csv(data_slice, wpath1)
data = data%>% filter(hits != "[]")
for(i in 1:nrow(data)){
data$hits[i] = gsub("\'hitNumber\'", paste0("'fullVisitorId':", "'", data$fullVisitorId[i], "', ",
"'visitId':", "'", data$visitId[i], "', \'hitNumber\'"), data$hits[i])
}
#
show = head(data)
data = data %>% select(hits)
data$hits = gsub("\"","\'",data$hits)
data$hits = gsub("^\\[","",data$hits)
data$hits = gsub("\\]$","",data$hits)
data$hits = gsub("^\'","\"",data$hits)
data$hits = gsub("\'$","\"",data$hits)
data$hits = gsub("\\{\'","\\{\"",data$hits)
data$hits = gsub("\'\\}","\"\\}",data$hits)
data$hits = gsub("\'[  ]*,","\" ,",data$hits)
data$hits = gsub(",[  ]*\'",", \"",data$hits)
data$hits = gsub("\'[  ]*:","\" :",data$hits)
data$hits = gsub(":[   ]*\'",": \"",data$hits)
data$hits = gsub("True","1",data$hits)
data$hits = gsub("False","0",data$hits)
data$hits = gsub(",$","",data$hits)
data$hits = gsub("^,","",data$hits)
data$hits = gsub("[,]+",",",data$hits)
hits_data = str_c(data$hits, collapse = ",")
hits_data = str_c("[", hits_data, "]")
hits_data = fromJSON(hits_data, flatten = T)
fea_uniq_values <- sapply(hits_data, n_distinct)
fea_del <- names(fea_uniq_values[fea_uniq_values == 1])
hits_data = hits_data %>% select(-one_of(fea_del))
is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
"(not set)", "<NA>", "unknown.unknown",  "(none)")
hits_data = hits_data %>% mutate_all(funs(ifelse(is_na_val(.), NA, .)))
save(hits_data, file = "/media/bohao/File/Data/hits.Rdata")
showhit = head(hits_data,20)
View(showhit)
path = '/media/bohao/File/Data/train_US_1year_nojson.csv'
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
#
# # parse <- . %>%
# #   bind_cols(flatten_json(.$device)) %>%
# #   select(-device) %>%
# #   bind_cols(flatten_json(.$geoNetwork)) %>%
# #   select(-geoNetwork) %>%
# #   bind_cols(flatten_json(.$trafficSource)) %>%
# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
# # data = parse(data)
show = head(data)
save(data, '/media/bohao/File/Data/data.Rdata')
library(tidyverse)
library(jsonlite)
library(stringi)
path = '/media/bohao/File/Data/train_US_1year_nojson.csv'
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
#
# # parse <- . %>%
# #   bind_cols(flatten_json(.$device)) %>%
# #   select(-device) %>%
# #   bind_cols(flatten_json(.$geoNetwork)) %>%
# #   select(-geoNetwork) %>%
# #   bind_cols(flatten_json(.$trafficSource)) %>%
# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
# # data = parse(data)
show = head(data)
save(data, '/media/bohao/File/Data/data.Rdata')
save(data, file = '/media/bohao/File/Data/data.Rdata')
library(tidyverse)
library(jsonlite)
library(stringi)
path = '/media/bohao/File/Data/train_US_1year_nojson.csv'
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
#
# # parse <- . %>%
# #   bind_cols(flatten_json(.$device)) %>%
# #   select(-device) %>%
# #   bind_cols(flatten_json(.$geoNetwork)) %>%
# #   select(-geoNetwork) %>%
# #   bind_cols(flatten_json(.$trafficSource)) %>%
# #   select(-trafficSource) %>%
# #   bind_cols(flatten_json(.$totals)) %>%
# #   select(-totals)
#
data = read_csv(path)
# # data = parse(data)
show = head(data)
save(data, file = '/media/bohao/File/Data/data.Rdata')
install.packages("keras")
## Load packages
library(tidyverse)
library(caret)
library(lubridate)
library(MASS)
library(glmnet)
library(xgboost)
library(keras)
setwd("~/ADS-Final-Project/ADS-Final-Project")
## Read in data
dat <- read_csv("/Users/chenhuan/Downloads/Data-3/train_US_1year_nojson.csv")
## Load packages
library(tidyverse)
library(caret)
library(lubridate)
library(MASS)
library(glmnet)
library(xgboost)
library(keras)
dat.mat = read_rds("datamat")
dat.mat = read_rds("datamat.Rdata")
dat.mat = read_rds("datamat01")
dat.mat = readRDS("datamat")
read_rds("datmat")
setwd("~/ADS-Final-Project/ADS-Final-Project")
dat.mat = read_rds("datmat")
dat.mat = read_rds("datmat")
glimpse(dat.mat)
train.index <- sample(1 : nrow(dat.mat), 0.7 * nrow(dat.mat), replace = FALSE)
dat.train <- dat.mat[train.index, ]
dat.test <- dat.mat[-train.index, ]
model_lm <- lm(log(1 + transactionRevenue) ~ . , data = as.data.frame(dat.train))
#summary(model_lm)
pred.res <- predict(model_lm, as.data.frame(dat.test %>% dplyr::select(-transactionRevenue)))
pred.res[which(pred.res < 0)] = 0
loss.lm <- sum((log(dat.test$transactionRevenue + 1) - pred.res)^2) / length(pred.res)
print(paste0("The loss for the linear regression is ", round(loss.lm,4) ))
summary(model_lm)
## Fit a logistic regression model to find out which customer buys items
model_logistic <- glm(factor(as.numeric(transactionRevenue > 0)) ~. , data = dat.train, family = "binomial")
predict.buy <- predict(model_logistic, dat.test %>% dplyr::select(-transactionRevenue), type="response")
## Fit linear regression model for the buy option data
model_lm <- lm(log(1 + transactionRevenue) ~ . , data = as.data.frame(dat.train %>% filter(transactionRevenue > 0)))
## The index which has predict.buy larger than 0.5 and the prediciton result
index = which(predict.buy > 0.5)
pred.res <- predict(model_lm, dat.test[index, ])
predicition.index <- rep(0, nrow(dat.test))
predicition.index[index] = pred.res
pred.res = predicition.index
pred.res[which(pred.res < 0)] = 0
## Loss for the linear regression
loss.logistic_lm <- sum((log(dat.test$transactionRevenue + 1) - pred.res)^2) / length(pred.res)
print(paste0("The loss for the logistic + linear regression is ", round(loss.logistic_lm,4) ))
## Fit a logistic regression model to find out which customer buys items
# trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
model_tree <- train(factor(as.numeric(transactionRevenue > 0)) ~. , data = dat.train, method = "rf")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
load("../dataset/data.Rdata")
load("../dataset/hits.Rdata")
show = head(data, 20)
show_hits = head(hits_data, 20)
library(tidyverse)
load("../dataset/data.Rdata")
load("../dataset/hits.Rdata")
show = head(data, 20)
show_hits = head(hits_data, 20)
hits_data = hits_data %>% select(-item.currencyCode, -transaction.currencyCode, -page.searchCategory)
hits_data$hitNumber = as.numeric(hits_data$hitNumber)
data$transactionRevenue[is.na(data$transactionRevenue)] = 0
data$totalTransactionRevenue[is.na(data$totalTransactionRevenue)] = 0
data$transactionRevenue = as.numeric(data$transactionRevenue)
data$totalTransactionRevenue = as.numeric(data$totalTransactionRevenue)
hits_data$transaction.transactionRevenue[is.na(hits_data$transaction.transactionRevenue)] = 0
fulldata = merge(data, hits_data, by = c("fullVisitorId","visitId")) %>%
arrange(fullVisitorId,visitId, hitNumber)
View(show_hits)
sum(is.na(hits_data$transaction.transactionRevenue))
library(tidyverse)
xx = fulldata %>% group_by(fullVisitorId,visitId) %>% summarise(transaction.count = sum(transaction.transactionRevenue>0), buy = max(transcationRevenue > 0))
xx = fulldata %>% group_by(fullVisitorId,visitId) %>% summarise(transaction.count = sum(transaction.transactionRevenue>0), buy = max(transactionRevenue > 0))
table(xx$transaction.count[xx$buy > 0])
table(xx$transaction.count[xx$buy =0])
table(xx$transaction.count[xx$buy == 0])
trans_count = fulldata %>%
group_by(fullVisitorId,visitId) %>%
summarise(transaction.count = sum(transaction.transactionRevenue>0),
buy = max(transactionRevenue > 0))
trans_count %>% filter(buy > 0) %>%
ggplot(x = transaction.count) +
geom_density()
trans_count %>% filter(buy > 0) %>%
ggplot(aes(x = transaction.count)) +
geom_density()
trans_count %>% filter(buy > 0) %>%
ggplot(aes(x = transaction.count)) +
geom_bar()
trans_count %>% filter(buy > 0) %>%
ggplot(aes(x = transaction.count)) +
geom_bar() + xlab("Number of goods bought") +
ggtile("How much good will a customer buy if they bought any")
trans_count %>% filter(buy > 0) %>%
ggplot(aes(x = transaction.count)) +
geom_bar() + xlab("Number of goods bought") +
ggtitle("How much good will a customer buy if they bought any")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
load("../dataset/full.Rdata")
show = head(fulldata, 50)
View(show)
aux = hits_data %>% mutate(has.transaction = transaction.transactionRevenue > 0) %>%
select(fullVisitorId, visitId, has.transaction)
aux = hits_data %>% mutate(has.transaction = transaction.transactionRevenue > 0) %>%
dyplr::select(fullVisitorId, visitId, has.transaction)
aux = hits_data %>% mutate(has.transaction = transaction.transactionRevenue > 0) %>%
dplyr::select(fullVisitorId, visitId, has.transaction)
full = merge(aux, fulldata, by=c("fullVisitorId", "visitId"))
remove(full)
aux = hits_data %>% mutate(has.transaction = transaction.transactionRevenue > 0) %>%
dplyr::select(fullVisitorId, visitId, hitNumber, has.transaction)
full = merge(aux, fulldata, by=c("fullVisitorId", "visitId", "hitNumber"))
save(full, file = "../dataset/full.Rdata")
save(full, file = "../dataset/full.Rdata")
